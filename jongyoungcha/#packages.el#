;;; packages.el --- jongyoungcha layer packages file for Spacemacs.
;;
;; Copyright (c) 2012-2016 Sylvain Benner & Contributors
;;
;; Author: jongyoungcha <jongyoungcha@jongyoungcha-ubuntu>
;; URL: https://github.com/syl20bnr/spacemacs
;;
;; This file is not part of GNU Emacs.
;;
;;; License: GPLv3

;;; Commentary:

;; See the Spacemacs documentation and FAQs for instructions on how to implement
;; a new layer:
;;
;;   SPC h SPC layers RET
;;
;;
;; Briefly, each package to be installed or configured by this layer should be
;; added to `jongyoungcha-packages'. Then, for each package PACKAGE:
;;
;; - If PACKAGE is not referenced by any other Spacemacs layer, define a
;;   function `jongyoungcha/init-PACKAGE' to load and initialize the package.

;; - Otherwise, PACKAGE is already referenced by another Spacemacs layer, so
;;   define the functions `jongyoungcha/pre-init-PACKAGE' and/or
;;   `jongyoungcha/post-init-PACKAGE' to customize the package as it is loaded.

;;; Code:


(defconst jongyoungcha-packages
  '(
    smart-compile
    company
    rtags
    yasnippet
    helm-gtags
    transpose-frame
    )
  "The list of Lisp packages required by the jongyoungcha layer.

Each entry is either:

1. A symbol, which is interpreted as a package to be installed, or

2. A list of the form (PACKAGE KEYS...), where PACKAGE is the
    name of the package to be installed or loaded, and KEYS are
    any number of keyword-value-pairs.

    The following keys are accepted:

    - :excluded (t or nil): Prevent the package from being loaded
      if value is non-nil

    - :location: Specify a custom installation location.
      The following values are legal:

      - The symbol `elpa' (default) means PACKAGE will be
        installed using the Emacs package manager.


      - The symbol `local' directs Spacemacs to load the file at
        `./local/PACKAGE/PACKAGE.el'

      - A list beginning with the symbol `recipe' is a melpa
        recipe.  See: https://github.com/milkypostman/melpa#recipe-format"
  )


 (defun jongyoungcha/init-smart-compile ()
   (use-package smart-compile
     :ensure t
     :defer t
     :bind(([f6] . smart-compile))
     :init
     :config)
   )


(defun jongyoungcha/init-rtags()
  (use-package rtags
    :ensure t
    :defer t
    :init
    :config)
  )


(defun jongyoungcha/init-company ()
  (use-package company
    :ensure t
    :defer t
    :init
    :config
    (require 'company))
  )


(defun jongyoungcha/init-yasnippet ()
  (use-package yasnippet
    :ensure t
    :defer t
    :init
    :config
    (require 'yasnippet))
  )


(defun jongyoungcha/init-helm-gtags ()
  (use-package helm-gtags
    :ensure t
    :defer t
    :init
    :config
    (require 'helm-gtags))
  )

(defun jongyoungcha/transpose-frame()
  (use-package transpose-frame
    :ensure t
    :defer t
    :init
    :config
  ))

;; The functions defined by jongyoungcha
(defun prev-window ()
  (interactive)
  (other-window -1))

;; 
(defun upload-files-using-python1()
  "upload files using "
  (interactive)
  (let ((python-module-name "dispatch.py"))
    (setq full-path (format "%s%s" default-directory python-module-name))
    (with-temp-buffer-window "*python-result"
                             #'temp-buffer-show-function
                             nil
                             (while (not file-exists-p full-path)
                                    (insert "hello, 

;; (defun upload-files-using-python2()
;;   "upload files using "
;;   (interactive)
;;   (let ((home-directory (getenv "HOME"))
;;         (uploaded-file-name buffer-file-name))____


;;     (setq python-module-name (format "%s/jongyoungcha-s-python-modules/jyc_upload_file/jyc_upload_file.py" home-directory))
;;     (setq command (format "python %s " python-module-name))
;;     (message "command : %s" command)
;;     (shell-command command))
;;     )

(setq jyc-upload-file-current-dir nil)

(defun walk-up-and-find-file (name-to-find)
  "walk up and find file"
  (let ((jyc-upload-file-current-dir nil)
        (is-finded nil))
  ;(while (equal is-finded nil)
  ;  )
  )



(defun with-temp-buffer-test()
  (interactive)
  (with-temp-buffer
    (insert "testest")
    (buffer-string))
  )


;; key bindings
(setq c-set-style 'whitesmith)
(font-lock-mode t)

(global-set-key (kbd "C-x p") 'prev-window)

(global-set-key (kbd "C-x g t") 'helm-gtags-find-tag)
(global-set-key (kbd "C-x g r") 'helm-gtags-find-rtag)
(global-set-key (kbd "C-x g s") 'helm-gtags-find-symbol)


(global-set-key (kbd "C-x w") 'flop-frame)

;; ensure that we use only rtags checking
;; https://github.com/Andersbakken/rtags#optional-1
(defun setup-flycheck-rtags ()
  (interactive)
  (flycheck-select-checker 'rtags)
  ;; RTags creates more accurate overlays.
  (setq-local flycheck-highlighting-mode nil)
  (setq-local flycheck-check-syntax-automatically nil))

;; only run this if rtags is installed
(when (require 'rtags nil :noerror)
  ;; make sure you have company-mode installed
  (require 'company)
  (define-key c-mode-base-map (kbd "M-.")
    (function rtags-find-symbol-at-point))
  (define-key c-mode-base-map (kbd "M-,")
    (function rtags-find-references-at-point))
  ;; install standard rtags keybindings. Do M-. on the symbol below to
  ;; jump to definition and see the keybindings.
  (rtags-enable-standard-keybindings)
  ;; comment this out if you don't have or don't use helm
  (setq rtags-use-helm t)
  ;; company completion setup
  (setq rtags-autostart-diagnostics t)
  (rtags-diagnostics)
  (setq rtags-completions-enabled t)
  (push 'company-rtags company-backends)
  (global-company-mode)
  (define-key c-mode-base-map (kbd "<C-tab>") (function company-complete)))
  ;; use rtags flycheck mode -- clang warnings shown inline
  ;; c-mode-common-hook is also called by c++-mode


;;; packages.el ends here
